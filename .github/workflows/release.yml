name: Release

on:
  release:
    types: [published]
    branches:
      - master
      - luajit

jobs:
  reddit:
    runs-on: ubuntu-latest
    steps:
    - uses: BjornLuG/release-for-reddit-action@v1
      with:
        username: ${{ secrets.REDDIT_USERNAME }}
        password: ${{ secrets.REDDIT_PASSWORD }}
        app-id: ${{ secrets.REDDIT_APP_ID }}
        app-secret: ${{ secrets.REDDIT_APP_SECRET }}
        subreddit: craftos_pc
        title: CraftOS-PC ${{ github.event.release.tag_name }} is now available!
        comment: ${{ github.event.release.body }}
        flair-id: 33b418d2-8e71-11ea-b7d8-0e1aee799c6b

  release-windows:
    runs-on: windows-2022
    steps:
    - name: Wait for build to complete
      uses: lewagon/wait-on-check-action@v1.1.2
      with:
        ref: ${{ github.ref }}
        check-name: 'Build Windows'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10
    - uses: actions/checkout@v1
    - name: Download ROM
      run: git clone https://github.com/MCJack123/craftos2-rom ${{ env.GITHUB_WORKSPACE }}\craftos2-rom
    - name: Download resources
      run: git clone https://github.com/MCJack123/craftos2-release-resources ${{ env.GITHUB_WORKSPACE }}\craftos2-release-resources
    - name: Download built executables
      uses: dawidd6/action-download-artifact@v2.22.0
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: main.yml
        commit: ${{ github.sha }}
        name: CraftOS-PC-Artifact
        path: ${{ env.GITHUB_WORKSPACE }}\bin
    - name: Build installer
      run: |
        "C:\Program Files (x86)\Inno Setup 6\iscc" /DMyAppVersion=${{ github.event.release.tag_name }} /DWorkspaceDir=${{ env.GITHUB_WORKSPACE }} ${{ env.GITHUB_WORKSPACE }}\craftos2-release-resources\windows\CraftOS-PC.iss
    - name: Build delta installer
      run: |
        $delta_version=Get-Content "${{ env.GITHUB_WORKSPACE }}\craftos2-release-resources\windows\dll\version.txt"
        chcp 65001
        echo ("DELTA_VERSION=" + $delta_version) >> $env:GITHUB_ENV
        if ( "${{ github.event.release.tag_name }}" -ne $delta_version ) {
          "C:\Program Files (x86)\Inno Setup 6\iscc" /DMyAppVersion=${{ github.event.release.tag_name }} /DWorkspaceDir=${{ env.GITHUB_WORKSPACE }} /DDeltaVersion=$delta_version ${{ env.GITHUB_WORKSPACE }}\craftos2-release-resources\windows\CraftOS-PC-Delta.iss
        }
    - name: Build portable package
      run: |
        xcopy ${{ env.GITHUB_WORKSPACE }}\craftos2-rom\bios.lua ${{ env.GITHUB_WORKSPACE }}\bin\bios.lua /Q /K /Y
        xcopy ${{ env.GITHUB_WORKSPACE }}\crafots2-rom\rom ${{ env.GITHUB_WORKSPACE }}\bin\rom /E /Q /K /Y
        xcopy ${{ env.GITHUB_WORKSPACE }}\craftos2-rom\debug ${{ env.GITHUB_WORKSPACE }}\bin\debug /E /Q /K /Y
        tar -C ${{ env.GITHUB_WORKSPACE }}\bin -caf ${{ env.GITHUB_WORKSPACE }}\CraftOS-PC-Portable-Win64.zip *
    - name: Upload installer
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.GITHUB_WORKSPACE }\CraftOS-PC-Setup.exe
        asset_name: CraftOS-PC-Setup.exe
        asset_content_type: application/vnd.microsoft.portable-executable
    - name: Check if delta was built
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: "${{ env.GITHUB_WORKSPACE }\\CraftOS-PC-Setup_Delta-${{ env.DELTA_VERSION }}"
    - name: Upload delta installer
      if: steps.check_files.outputs.files_exists == 'true'
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.GITHUB_WORKSPACE }\CraftOS-PC-Setup_Delta-${{ env.DELTA_VERSION }}.exe
        asset_name: CraftOS-PC-Setup_Delta-${{ env.DELTA_VERSION }}.exe
        asset_content_type: application/vnd.microsoft.portable-executable
    - name: Upload portable archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.GITHUB_WORKSPACE }\CraftOS-PC-Portable-Win64.zip
        asset_name: CraftOS-PC-Portable-Win64.zip
        asset_content_type: application/zip

  release-mac:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - name: Download ROM
      run: git clone https://github.com/MCJack123/craftos2-rom ${{ env.GITHUB_WORKSPACE }}/craftos2-rom
    - name: Download resources
      run: git clone https://github.com/MCJack123/craftos2-release-resources ${{ env.GITHUB_WORKSPACE }}/craftos2-release-resources
    - name: Install signing certificates
      env: 
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        NOTARIZATION_CERTIFICATE: ${{ secrets.NOTARIZATION_CERTIFICATE }}
      run: |
        echo $MACOS_CERTIFICATE | base64 —decode > certificate.p12
        security create-keychain -p actionrunner build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p actionrunner build.keychain
        security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actionrunner build.keychain
        echo $NOTARIZATION_CERTIFICATE | base64 -decode > APIKey.p8
    - name: Build CraftOS-PC
      run: |
        cp -Rp $GITHUB_WORKSPACE/craftos2-release-resources/mac/Makefile $GITHUB_WORKSPACE/craftos2-release-resources/mac/codesign $GITHUB_WORKSPACE/craftos2-release-resources/mac/CraftOS-PC.app .
        make -C craftos2-lua macosx -j3
        if [[ $GITHUB_REF =~ luajit ]]; then
          rm craftos2-lua/src/*.o
          make -C craftos2-lua macosx-arm -j3
        fi
        make macapp -j3
        make mac-plugin
        codesign -fs <identity-id> --timestamp --options runtime --deep ccemux.bundle
    - name: Build and notarize disk image
      run: |
        cp -Rp ${{ env.GITHUB_WORKSPACE }}/craftos2-release-resources/mac/CraftOS-PC CraftOS-PC
        cp -Rp CraftOS-PC.app ccemux.bundle CraftOS-PC
        $GITHUB_WORKSPACE/craftos2-release-resources/mac/dropdmg --layout-folder $GITHUB_WORKSPACE/craftos2-release-resources/mac/layout -f bzip2 -n CraftOS-PC
        xcrun notarytool submit -k APIKey.p8 -d C3VGHY9QZ3 -i 88c37dac-bd0f-4adc-9e79-a24745e2e292 --wait CraftOS-PC.dmg
        xcrun stapler staple CraftOS-PC.dmg
    - name: Upload disk image
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: CraftOS-PC.dmg
        asset_name: CraftOS-PC.dmg
        asset_content_type: application/octet-stream

  release-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Download resources
      run: git clone https://github.com/MCJack123/craftos2-release-resources ${{ env.GITHUB_WORKSPACE }}/craftos2-release-resources
    - name: Install dependencies
      env:
        GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
        GPG_KEY_PASSWORD: ${{ secrets.GPG_KEY_PASSWORD }}
      run: |
        sudo add-apt-repository -y ppa:jackmacwindows/ppa
        sudo apt install -y devscripts dput lintian debhelper unzip libsdl2-dev libsdl2-mixer-dev libhpdf-dev libpng++-dev libwebp-dev libpoco-dev libncurses5-dev craftos-pc-data craftos-pc
        echo $GPG_SIGNING_KEY > signing.key
        gpg --batch --import signing.key --passphrase $GPG_KEY_PASSWORD
    - name: Build and upload package
      env:
        GPG_KEY_PASSWORD: ${{ secrets.GPG_KEY_PASSWORD }}
        RELEASE_BODY: ${{ github.event.release.body }}
      run: |
        LUAJIT=
        if [[ $GITHUB_REF =~ luajit ]]; then LUAJIT=-luajit; fi
        cp $GITHUB_WORKSPACE/craftos2-release-resources/ubuntu/debian_craftos-pc$LUAJIT debian
        VERSION=$(echo $GITHUB_REF | grep -o '[0-9\.]*')
        if [ "a$LUAJIT" == "a" ]; then VERSION=1:$VERSION; fi
        echo "craftos-pc$LUAJIT ($VERSION-bionic1) bionic; urgency=medium" > debian/changelog
        echo "    " >> debian/changelog
        echo $RELEASE_BODY | sed 's/^/    /g' >> debian/changelog
        echo "    " >> debian/changelog
        echo " -- JackMacWindows <jackmacwindowslinux@gmail.com>  $(date "+%a, %d %b %Y %T %z")" >> debian/changelog
        echo "" >> debian/changelog
        gunzip -c /usr/share/doc/craftos-pc/changelog.Debian.gz >> debian/changelog
        cat debian/changelog
        debian/build.sh

  release-arch:
    runs-on: ubuntu-latest
    steps:
    - name: Download resources
      run: git clone https://github.com/MCJack123/craftos2-release-resources ${{ env.GITHUB_WORKSPACE }}/craftos2-release-resources
    - name: Upload package
      env:
        AUR_SSH_KEY: ${{ secrets.AUR_SSH_KEY }}
      run: |
        LUAJIT=
        if [[ $GITHUB_REF =~ luajit ]]; then LUAJIT=-luajit; fi
        VERSION=$(echo $GITHUB_REF | grep -o '[0-9\.]*')
        echo $AUR_SSH_KEY > ~/.ssh/aur
        printf "Host aur.archlinux.org\n  IdentityFile ~/.ssh/aur\n  User aur\n" >> ~/.ssh/config
        git clone ssh://aur@aur.archlinux.org/craftos-pc$LUAJIT.git
        cd craftos-pc$LUAJIT
        sed -i 's/^pkgver=.*$/pkgver='$VERSION'/' PKGBUILD
        sed -i 's/^pkgrel=[0-9]*/pkgrel=1/' PKGBUILD
        sed -i 's/^sha256sums=.*$/sha256sums=("'$(curl -sL https://github.com/MCJack123/craftos2/archive/v$VERSION.tar.gz | shasum -a 256)'" "'$(curl -sL https://github.com/MCJack123/craftos2-lua/archive/v$VERSION.tar.gz | shasum -a 256)'")/' PKGBUILD
        source ../srcinfo.sh
        write_srcinfo_content > .SRCINFO
        git add PKGBUILD .SRCINFO
        git commit -m "v$VERSION"
#        git push

  hashes:
    runs-on: ubuntu-latest
    needs: [release-windows, release-mac]
    steps:
      - name: Generate Release Hashes
        uses: MCJack123/ghaction-Generate-Release-Hashes@v2
        with:
          file-name: hashes.txt
      - name: Upload a Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: hashes.txt
          asset_name: sha256-hashes.txt
          asset_content_type: text/plain